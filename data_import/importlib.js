// Generated by CoffeeScript 1.6.3
(function() {
  var Throttle, XmlPath, cacheHtml, currentNamespaceId, currentPage, fs, http, inInitMode, indexName, namespaces, pageCount, sax, saxStream, saxStreamFinished, saxStreamOptions, storePage, strict, throttle, wikijs, wikipediaDataPath, xmlPath;

  saxStreamFinished = function() {
    return console.log('FINISHED');
  };

  storePage = function(page) {
    var options, req, title;
    title = page['title'];
    if (cacheHtml && page['text'] !== void 0) {
      page['html'] = wikijs.process(page['text']);
    }
    options = {
      host: 'localhost',
      port: 9200,
      path: ("/" + indexName + "/page/") + encodeURIComponent(page['title']),
      method: 'PUT'
    };
    req = http.request(options, function(res) {
      var shouldLog;
      shouldLog = false;
      if (res.statusCode !== 201) {
        shouldLog = true;
      }
      if (shouldLog) {
        console.log('PAGE: ' + page['title']);
        console.log('HEADERS: ' + JSON.stringify(res.headers));
      }
      return res.on('data', function(chunk) {
        if (shouldLog) {
          return console.log('BODY: ' + chunk);
        }
      });
    });
    req.on('error', function(e) {
      return console.log(("problem with request " + title + ": ") + e.message);
    });
    req.write(JSON.stringify(page));
    return req.end();
  };

  fs = require('fs');

  sax = require('sax');

  http = require('http');

  wikijs = require('wiky.js');

  Throttle = require('throttle');

  XmlPath = require('./XmlPath');

  throttle = new Throttle(768 * 1024);

  cacheHtml = true;

  if (cacheHtml) {
    indexName = 'wikipedia_cached';
  } else {
    indexName = 'wikipedia';
  }

  xmlPath = new XmlPath;

  wikipediaDataPath = process.argv[2];

  pageCount = 0;

  wikijs.options['link-image'] = false;

  strict = true;

  saxStreamOptions = {
    trim: true,
    normalize: true,
    lowercase: true
  };

  saxStream = sax.createStream(strict, saxStreamOptions);

  inInitMode = true;

  currentNamespaceId = void 0;

  currentPage = void 0;

  namespaces = {};

  saxStream.onopentag = function(node) {
    xmlPath.push(node.name);
    if (inInitMode) {
      if (node.name === 'namespace') {
        return currentNamespaceId = node.attributes['key'];
      }
    } else if (node.name === 'page') {
      return currentPage = {};
    } else if (node.name === 'redirect') {
      return currentPage['redirect_to'] = node.attributes['title'];
    }
  };

  saxStream.ontext = function(text) {
    if (currentNamespaceId !== void 0) {
      return namespaces[currentNamespaceId] = text;
    } else {
      switch (xmlPath.peek()) {
        case 'title':
          return currentPage['title'] = text;
        case 'text':
          return currentPage['text'] = text;
        case 'ns':
          return currentPage['type'] = namespaces[text];
        case 'timestamp':
          return currentPage['timestamp'] = text;
        case 'comment':
          return currentPage['comment'] = text;
        case 'username':
          return currentPage['contributor_name'] = text;
        case 'ip':
          return currentPage['contributor_ip'] = text;
      }
    }
  };

  saxStream.onclosetag = function(nodeName) {
    xmlPath.pop();
    if (inInitMode) {
      if (nodeName === 'namespaces') {
        inInitMode = false;
        return currentNamespaceId = void 0;
      }
    } else if (nodeName === 'page') {
      storePage(currentPage);
      pageCount++;
      if (pageCount % 1000 === 0) {
        return console.log("Finished " + pageCount + " pages");
      }
    } else if (xmlPath.isEmpty()) {
      return saxStreamFinished();
    }
  };

  fs.createReadStream(wikipediaDataPath).pipe(throttle).pipe(saxStream);

}).call(this);
