// Generated by CoffeeScript 1.4.0
(function() {
  var MainPageTitle, app, cluster, elasticSearchHost, elasticSearchOptions, elasticSearchPort, errorLogger, express, hbs, http, i, indexName, logger, numCPUs, wikijs, _i;

  MainPageTitle = "Hlavná stránka";

  elasticSearchHost = "localhost";

  elasticSearchPort = "9200";

  indexName = "wikipedia_cached";

  elasticSearchOptions = function(title) {
    return {
      hostname: elasticSearchHost,
      port: elasticSearchPort,
      path: ("/" + indexName + "/page/") + encodeURIComponent(title),
      method: 'GET',
      agent: false
    };
  };

  logger = function(req, res, next) {
    console.log('Request: ' + req.method + ' ' + req.url);
    return next();
  };

  errorLogger = function(err, req, res, next) {
    console.log('Error: ' + req.method + ' ' + req.url + ' ' + err.message);
    return next();
  };

  cluster = require('cluster');

  express = require('express');

  http = require('http');

  wikijs = require('wiky.js');

  hbs = require('hbs');

  numCPUs = require('os').cpus().length;

  http.globalAgent.maxSockets = 1000;

  if (cluster.isMaster) {
    for (i = _i = 1; 1 <= numCPUs ? _i <= numCPUs : _i >= numCPUs; i = 1 <= numCPUs ? ++_i : --_i) {
      cluster.fork();
    }
    cluster.on('exit', function(worker, code, signal) {
      return console.log('worker ' + worker.process.pid + ' died');
    });
  } else {
    app = express();
    app.configure(function() {
      app.set('view engine', 'hbs');
      app.engine('hbs', hbs.__express);
      app.use(logger);
      app.use(app.router);
      return app.use(express["static"]('public'));
    });
    app.get('/', function(req, res) {
      return res.redirect('/wiki/' + MainPageTitle);
    });
    app.get('/wiki', function(req, res) {
      return res.redirect('/wiki/' + MainPageTitle);
    });
    app.get('/wiki/:contentId', function(req, res) {
      var innerReq;
      innerReq = http.request(elasticSearchOptions(req.params.contentId), function(innerRes) {
        var body;
        if (innerRes.statusCode !== 200) {
          res.send(innerRes.statusCode);
          return innerRes.resume();
        } else {
          body = '';
          innerRes.on('data', function(bodyChunk) {
            return body += bodyChunk;
          });
          return innerRes.on('end', function() {
            return res.render('page', {
              'title': req.params.contentId,
              'content': JSON.parse(body)._source.html
            });
          });
        }
      });
      innerReq.on('error', function(e) {
        return console.log('Got error: ' + e.message);
      });
      return innerReq.end();
    });
    app.get('/search/:searchString', function(req, res) {
      return res.send(req.params.searchString);
    });
    app.listen(8080);
  }

}).call(this);
